import random
import string
import lgpio
from mfrc522 import SimpleMFRC522
from gpiozero import AngularServo
from time import sleep
import os
import requests
import google.generativeai as genai
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

def createRandomKey():
    return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))

def readTag():
    CHIP = 0
    h = lgpio.gpiochip_open(CHIP)
    pin_rst = 25
    lgpio.gpio_claim_output(h, pin_rst)
    reader = SimpleMFRC522()
    try:
        id, text = reader.read()
        return {id, text}
    finally:
            # Release the GPIO pin and close the chip
            lgpio.gpio_free(h, pin_rst)
            lgpio.gpiochip_close(h)

def writeTag(code):
    CHIP = 0
    h = lgpio.gpiochip_open(CHIP)
    pin_rst = 25
    lgpio.gpio_claim_output(h, pin_rst)
    reader = SimpleMFRC522()
        # Ensure code is a multiple of 16 bytes
    try:
        if len(code) < 16:
            code = code.ljust(16)
        elif len(code) > 16:
            code = code[:16]
        reader.write(code)
        return {code}
    finally:
        # Release the GPIO pin and close the chip
        lgpio.gpio_free(h, pin_rst)
        lgpio.gpiochip_close(h)

def servo(duration):
    servo = AngularServo(18, min_pulse_width=0.0006, max_pulse_width=0.0023)
    servo.angle = 90
    sleep(duration)
    servo.angle = -90
    sleep(1)

# Configure the API key for Gemini
genai.configure(api_key=os.getenv("GENAI_KEY"))

# Initialize the OpenAI client for Galadreil
client = OpenAI(
    base_url="https://api.galadriel.com/v1",
    api_key=os.getenv("OPENAI_API_KEY"),
)

def download_image(image_url):
    """Downloads an image from a URL and saves it to a temporary file."""
    response = requests.get(image_url)
    if response.status_code == 200:
        # Save the image content to a temporary file
        temp_image_path = "/tmp/temp_image.png"  # Save as a temporary PNG file
        with open(temp_image_path, "wb") as f:
            f.write(response.content)
        return temp_image_path
    else:
        raise Exception(f"Failed to download image from URL: {image_url}")

def upload_to_gemini(path, mime_type=None):
    """Uploads the given file to Gemini for processing."""
    file = genai.upload_file(path, mime_type=mime_type)
    # print(f"Uploaded file '{file.display_name}' as: {file.uri}")
    return file

# Define the model generation configuration
generation_config = {
    "temperature": 0.2,
    "top_p": 0.95,
    "top_k": 40,
    "max_output_tokens": 8192,
    "response_mime_type": "application/json",  # Ensure the response is in JSON format
}

# Initialize the generative model for Gemini
model = genai.GenerativeModel(
    model_name="gemini-1.5-flash",
    generation_config=generation_config,
)

# Function to process the prompt and generate a description of the image
def generate_image_description(image_url):
    """Generates a description of the image using Gemini."""
    # Download the image from the provided URL
    image_path = download_image(image_url)

    # Upload the image file to Gemini
    uploaded_file = upload_to_gemini(image_path, mime_type="image/png")

    # Start a chat session with the model to generate a description
    chat_session = model.start_chat(
        history=[
            {
                "role": "user",
                "parts": [
                    uploaded_file,
                    "Please provide a detailed description of the package shown in the image."
                ],
            }
        ]
    )

    # Get the model's response and return it
    response = chat_session.send_message("Please generate a description of the package in the image.")
    return response.text.strip()

# Function to verify if the description generated by Gemini matches the product description
def verify_package(product_description, image_url):
    try:
        # Generate the description of the package image using Gemini
        generated_description = generate_image_description(image_url)

        # Construct the prompt for Galadreil to check if the descriptions match
        base_prompt = (
            f"You are a package verification assistant. Your task is to compare two descriptions "
            f"and determine if they match. Reply only in JSON format, with two keys: "
            f"1. 'isValidPackage' (true or false) and 2. 'reason' (a brief explanation)."
        )

        # Create the prompt for Galadreil
        prompt = (
            f"Product description: {product_description}\n"
            f"Generated package description: {generated_description}"
        )

        # Create the completion request to Galadreil for verifying the match
        response = client.chat.completions.create(
            model="llama3.1:405b",
            messages=[
                {"role": "system", "content": base_prompt},
                {"role": "user", "content": prompt},
            ],
        )

        return response.choices[0].message.content
    except FileNotFoundError:
        return {"error": "Image file not found. Please check the image path."}
    except Exception as e:
        return {"error": f"An error occurred: {str(e)}"}
